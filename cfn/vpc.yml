AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation template to create a custom VPC
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 'wordpress-vpc'
  IPV6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: wordpress-igw
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  publicsubnetwebA:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: '10.10.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '00::/64'
      Tags:
        - Key: Name
          Value: 'pub-sn-web-A'
  privatesubnetappA:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: '10.10.16.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '01::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'priv-sn-app-A'
  privatesubnetdbA:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: '10.10.32.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '02::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'priv-sn-db-A'
  reservedsubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: '10.10.48.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '03::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'res-sn-A'
  publicsubnetwebB:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: '10.10.64.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '04::/64'
      Tags:
        - Key: Name
          Value: 'pub-sn-web-B'
  privatesubnetappB:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: '10.10.80.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '05::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'priv-sn-app-B'
  privatesubnetdbB:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: '10.10.96.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '06::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'priv-sn-db-B'
  reservedsubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: '10.10.112.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '07::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'res-sn-B'
  publicsubnetwebC:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: '10.10.128.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '08::/64'
      Tags:
        - Key: Name
          Value: 'pub-sn-web-C'
  privatesubnetappC:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: '10.10.144.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '09::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'priv-sn-app-C'
  privatesubnetdbC:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: '10.10.160.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '10::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'priv-sn-db-C'
  reservedsubnetC:
    Type: AWS::EC2::Subnet
    DependsOn: IPV6CidrBlock
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: '10.10.176.0/20'
      VpcId: !Ref VPC
      Ipv6CidrBlock: 
        Fn::Sub:
          - ${vpcpart}${subnetpart}
          - vpcpart: !Select [0, !Split ['00::/56', !Select [0, !GetAtt [VPC, Ipv6CidrBlocks]]]]
            subnetpart: '11::/64'
      AssignIpv6AddressOnCreation: true
      Tags:
        - Key: Name
          Value: 'res-sn-C'
  natgatewayeip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  natgateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt natgatewayeip.AllocationId
      SubnetId: !Ref publicsubnetwebA
  publicroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  publicipv4route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicroutetable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  publicipv6route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicroutetable
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref InternetGateway
  privateroutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  privatenatgatewayroute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateroutetable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref natgateway
  routetableassociationwebA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsubnetwebA
  routetableassociationwebB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsubnetwebB
  routetableassociationwebC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicroutetable
      SubnetId: !Ref publicsubnetwebC
  routetableassociationappA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetappA
  routetableassociationappB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetappB
  routetableassociationappC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetappC
  routetableassociationdbA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetdbA
  routetableassociationdbB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetdbB
  routetableassociationdbC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref privatesubnetdbC
  routetableassociationreservedA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref reservedsubnetA
  routetableassociationreservedB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref reservedsubnetB
  routetableassociationreservedC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref privateroutetable
      SubnetId: !Ref reservedsubnetC
Outputs:
  VpcId:
    Description: VPC ID for the custom vpc
    Value: !Ref VPC
  WebAsubnetid:
    Description: Subnet ID for WebA
    Value: !Ref publicsubnetwebA
  AppAsubnetid:
    Description: Subnet ID for AppA
    Value: !Ref privatesubnetappA
  DBAsubnetid:
    Description: Subnet ID for DBA
    Value: !Ref privatesubnetdbA
  reservedAsubnetid:
    Description: Subnet ID for ReservedA
    Value: !Ref reservedsubnetA
  WebBsubnetid:
    Description: Subnet ID for WebB
    Value: !Ref publicsubnetwebB
  AppBsubnetid:
    Description: Subnet ID for AppB
    Value: !Ref privatesubnetappB
  DBBsubnetid:
    Description: Subnet ID for DBB
    Value: !Ref privatesubnetdbB
  reservedBsubnetid:
    Description: Subnet ID for ReservedB
    Value: !Ref reservedsubnetB
  WebCsubnetid:
    Description: Subnet ID for WebC
    Value: !Ref publicsubnetwebC
  AppCsubnetid:
    Description: Subnet ID for AppC
    Value: !Ref privatesubnetappC
  DBCsubnetid:
    Description: Subnet ID for DBC
    Value: !Ref privatesubnetdbC
  reservedCsubnetid:
    Description: Subnet ID for ReservedC
    Value: !Ref reservedsubnetC
  privateroutetableid:
    Description: PrivateRouteTable ID
    Value: !Ref privateroutetable