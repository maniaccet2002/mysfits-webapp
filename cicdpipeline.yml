AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to create CI/CD pipeline'
Parameters:
  stackname:
    Type: String
    Description: Main Stack Name
  ecsclustername:
    Type: String
    Description: ECS cluster name
  ecsservicename:
    Type: String
    Description: ECS Service Name
  ArtifactS3BucketName:
    Type: String
    Description: Bucket Name to store build artifacts for CICD Pipeline
Resources:
  mysfitsartifact:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactS3BucketName
      VersioningConfiguration:
        Status: Enabled
  mysfitsartifactpolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactS3BucketName
      PolicyDocument:
        Statement:
          - Sid: 'whitelistedGet'
            Action: 
              - 's3:GetObject'
            Effect: 'Allow'
            Principal: 
              AWS:
                - !GetAtt MysfitsCodePipelineServiceRole.Arn
                - !GetAtt MysfitsCodeBuildServiceRole.Arn
            Resource: 
              'Fn::Join':
                - ''
                - - !GetAtt mysfitsartifact.Arn
                  - '/*'
          - Sid: 'WhitelistedPut'
            Action:
              - 's3:putObject'
            Effect: 'Allow'
            Principal:
              AWS:
                - !GetAtt MysfitsCodeBuildServiceRole.Arn
                - !GetAtt MysfitsCodePipelineServiceRole.Arn
            Resource:
              'Fn::Join':
                - ''
                - - !GetAtt mysfitsartifact.Arn
                  - '/*'
  MysfitsCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
          - ''
          - - !Ref stackname
            - 'CodePipelineServiceRole'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - '-'
          - - !Ref stackname
            - 'codepipeline-service-policy'
        PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::*
            Effect: Allow
          - Action:
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - ecs:*
            - codebuild:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          Version: "2012-10-17"
  MysfitsCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
          - ''
          - - !Ref stackname
            - 'CodeBuildServiceRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Join:
          - '-'
          - - !Ref stackname
            - 'CodeBuildServicePolicy'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "codecommit:ListBranches"
            - "codecommit:ListRepositories"
            - "codecommit:BatchGetRepositories"
            - "codecommit:Get*"
            - "codecommit:GitPull"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:ListBucket"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "ecr:GetDownloadUrlForLayer"
            - "ecr:GetAuthorizationToken"
            - "ecr:UploadLayerPart"
            - "ecr:PutImage"
            - "ecr:BatchGetImage"
            - "ecr:CompleteLayerUpload"
            - "ecr:InitiateLayerUpload"
            - "ecr:BatchCheckLayerAvailability"
            Resource: "*"
  coderepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: 
        Fn::Join:
          - '-'
          - - !Ref stackname
            - 'app'
      RepositoryDescription: Code Commit repository for mysfits application
  codebuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: 
        Fn::Join:
          - '-'
          - - !Ref stackname
            - 'app-build'
      Description: Code Build for mysfits application
      ServiceRole: !GetAtt MysfitsCodeBuildServiceRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !GetAtt coderepo.CloneUrlHttp
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/python:3.5.2'
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'AWS_ACCOUNT_ID'
            Value: !Ref AWS::AccountId
          - Name: 'AWS_DEFAULT_REGION'
            Value: !Ref AWS::Region
      Artifacts:
        Type: NO_ARTIFACTS
  codepipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: 
        Fn::Join:
          - '-'
          - - !Ref stackname
            - 'app-codepipeline'
      RoleArn: !GetAtt MysfitsCodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref mysfitsartifact
      Stages:
        - Name: Source
          Actions:
            - Name: 
                Fn::Join:
                  - '-'
                  - - !Ref stackname
                    - 'codecommit'
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt coderepo.Name
                BranchName: master
                PollForSourceChanges: False
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: 
                    Fn::Join:
                      - '-'
                      - - !Ref stackname
                        - 'app-SourceArtifact'
        - Name: Build
          Actions:
            - Name: 
                Fn::Join:
                  - '-'
                  - - !Ref stackname
                    - 'build'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref codebuild
                PrimarySource: 
                  Fn::Join:
                    - '-'
                    - - !Ref stackname
                      - 'app-SourceArtifact'
              InputArtifacts:
                - Name: 
                    Fn::Join:
                      - '-'
                      - - !Ref stackname
                        - 'app-SourceArtifact'
              OutputArtifacts:
                - Name: 
                    Fn::Join:
                      - '-'
                      - - !Ref stackname
                        - 'app-BuildArtifact'
        - Name: Deploy
          Actions:
            - Name: 
                Fn::Join:
                  - '-'
                  - - !Ref stackname
                    - 'deploy'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              Configuration:
                ClusterName:  !Ref ecsclustername
                ServiceName:  !Ref ecsservicename
                DeploymentTimeout: 15
              InputArtifacts:
                - Name: 
                    Fn::Join:
                      - '-'
                      - - !Ref stackname
                        - 'app-BuildArtifact'
  lambdas3role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
          - '-'
          - - !Ref stackname
            - 'lambdas3role4cicd'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: "LambdaS3RolePolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: AllowLogging
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          - Sid: writetodestinationbucket
            Effect: "Allow"
            Action:
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
            Resource: 
              - 'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref ArtifactS3BucketName
                    - '/*'
              - 'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref ArtifactS3BucketName
  artifactcleanuplambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt lambdas3role.Arn
      Runtime: 'python3.8'
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import cfnresponse
          import re
          
          from botocore.exceptions import ClientError
          s3=boto3.resource('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event,context):
              logger.info("Received event: %s" % json.dumps(event))
              artifactbucket = event['ResourceProperties']['ArtifactBucket']
              
              result = cfnresponse.SUCCESS
              
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      result = cfnresponse.SUCCESS
                  elif event['RequestType'] == 'Delete':
                      bucket = s3.Bucket(artifactbucket)
                      bucket.object_versions.delete()
              except ClientError as e:
                  logger.error('Error: %s', e)
                  result = cfnresponse.FAILED
              cfnresponse.send(event, context, result, {})
  artifactlambda:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt artifactcleanuplambda.Arn
      ArtifactBucket: !Ref mysfitsartifact
Outputs:
  coderepourl:
    Description: HTTPS URL for the code commit repository
    Value: !GetAtt coderepo.CloneUrlHttp
              
              
          